/*
 * VideoDecoderFFmpeg.cpp
 *
 *  Created on: 2013-9-6
 *      Author: lxn
 */
#include "VideoDecoderFFmpeg.h"
#include "MediaParserFFmpeg.h"
#include "SnailException.h"
#include <iostream>
#include <string>

using namespace std;
using snail::SnailException;

namespace snail{
namespace media{
VideoDecoderFFmpeg::VideoDecoderFFmpeg(MediaParser *mediaParser):
		VideoDecoder(mediaParser),
		_videoCodecCtx(0),
		_videoCodec(0),
		_swsCtx(0),
		_videoTimeBase(0),
		_videoFrameCount(0){
	if(!init()){
		throw SnailException("ERROR:Create the Video Decoder(FFmpeg) failed");
	}
	startVideoDecoderThread();
}

VideoDecoderFFmpeg::~VideoDecoderFFmpeg(){
	setKillThread();
	clearVideoFrameQueue();
	_videoDecoderThread->join();
	_videoDecoderThread.reset();
	if(_swsCtx){
		sws_freeContext(_swsCtx);
		_swsCtx = NULL;
	}
}
bool VideoDecoderFFmpeg::init(){
	_videoCodecCtx = global_getVideoCtx();
	_videoCodec = global_getVideoCodec();
	if(!_videoCodecCtx || !_videoCodec){
		return false;
	}
	_videoTimeBase = _mediaParser->videoTimeBase();
	if(!_videoTimeBase){
		return false;
	}
	return true;
}
bool VideoDecoderFFmpeg::decodeVideoFrame(){
	auto_ptr<AVPacket> pkt = _mediaParser->nextVideoEncodedFrame();
	if(pkt.get()){
		AVFrame *videoFrame = NULL;
		int gotFrame ,len;
		gotFrame = len = 0;
		videoFrame = avcodec_alloc_frame();
		if(!videoFrame){
			printf("<lxn>%s(%d)-->alloc the video avFrame failed\n",__FILE__,__LINE__);
			av_free_packet(pkt.get());
			return false;
		}
		boost::mutex::scoped_lock lock(_framesQueueMutex);
		len = avcodec_decode_video2(_videoCodecCtx, videoFrame, &gotFrame, pkt.get());
		lock.unlock();

		//free the packet's memory
		av_free_packet(pkt.get());

		if(!gotFrame){
			printf("<lxn>%s(%d) decode the video frame failed\n",__FILE__,__LINE__);
			return false;
		}
		pushDecodedVideoFrame(videoFrame);
	}else{
#if 1//when play over if as not call the close then block the video Decoder thread
		if(_mediaParser->parseComplete()){
			boost::mutex::scoped_lock lock(_framesQueueMutex);
			cout<<"now parsed completely and the video Packet queue is empty,so block the video decoder Thread"<<endl;
			_decoderThreadWakeup.wait(lock);
		}
#endif
	}
	return true;
}

//public interface
int VideoDecoderFFmpeg::videoFrameQueueLength(){
	boost::mutex::scoped_lock lock(_framesQueueMutex);
	return queueSize();
}

//function for operate the video decoded frame queue
int VideoDecoderFFmpeg::queueSize(){
	return _videoDecodedFramesQueue.size();
}
bool VideoDecoderFFmpeg::queueEmpty(){
	return _videoDecodedFramesQueue.empty();
}
void VideoDecoderFFmpeg::pushFrame(VideoDecodedFrame *frame){
	_videoDecodedFramesQueue.push_back(frame);
}
VideoDecodedFrame *VideoDecoderFFmpeg::popFrame(){
	VideoDecodedFrame *frame = _videoDecodedFramesQueue.front();
	_videoDecodedFramesQueue.pop_front();
	return frame;
}
void VideoDecoderFFmpeg::pushDecodedVideoFrame(AVFrame* frame){
	boost::mutex::scoped_lock lock(_framesQueueMutex);
#if 0
	pushFrame(frame);
#else
#if ENABLE_DEBUG
	cout<<"#####VideodecodedFrame count = "<<_videoFrameCount<<"queueSize= "<<queueSize()<<endl;
#endif
	int64_t framePts = convertTime(frame->pkt_pts);
	VideoImage *frameImage;
	frameImage = yuvToRgb(frame);
	VideoDecodedFrame *newFrame = new VideoDecodedFrame(frameImage, framePts);
#if ENABLE_DEBUG
	_videoFrameCount++;
#endif
	pushFrame(newFrame);
#endif
	if(queueSize() >= 4){
		_decoderThreadWakeup.wait(lock);
	}
}


VideoDecodedFrame* VideoDecoderFFmpeg::popDecodedVideoFrame(){
	boost::mutex::scoped_lock lock(_framesQueueMutex);
	VideoDecodedFrame *frame=NULL;
	if(!queueEmpty()){
		frame= popFrame();
	}else{
		cout<<"queue empty"<<endl;
	}
	if(queueSize()<=1){
		_decoderThreadWakeup.notify_all();
	}
	return frame;
}

VideoImage * VideoDecoderFFmpeg::yuvToRgb(AVFrame* frame){
	AVFrame *videoFrame = NULL;
	videoFrame = frame;
	VideoImage *reImage = NULL;

	if(videoFrame){
	    PixelFormat srcPixFmt = _videoCodecCtx->pix_fmt;
		int result, bufSize;
		result = bufSize = 0;
		const int w = _videoCodecCtx->width;
		const int h = _videoCodecCtx->height;

		PixelFormat desPixFmt = PIX_FMT_RGB24;
		if(!_swsCtx){
			_swsCtx = sws_getContext(w, h, srcPixFmt, w, h, desPixFmt,
					SWS_BILINEAR, NULL, NULL, NULL);
		}
		if(!_swsCtx){
			cout<<__FILE__<<"("<<__LINE__<<")"<<"   Create the swsContext failed"<<endl;
			goto fail;
		}
		bufSize = avpicture_get_size(desPixFmt, w, h);
		reImage = new VideoImage(w, h, IMAGE_RGB);
		reImage->_pts = convertTime(videoFrame->pkt_pts);
		AVPicture picture;

		avpicture_fill(&picture, reImage->_data, desPixFmt, w, h);

		result = sws_scale(_swsCtx, videoFrame->data, videoFrame->linesize,
											0, h, picture.data, picture.linesize);
		if(result == -1){
			cout<<"conver the image failed"<<endl;
			goto fail;
		}
		avcodec_free_frame(&videoFrame);
		return reImage;
	}//if(videoFrame)
	else{
		cout<<"decoded video frame queue empty"<<endl;
		return reImage;
	}
	fail:
		avcodec_free_frame(&videoFrame);
		return reImage;

}
auto_ptr<VideoImage> VideoDecoderFFmpeg::getVideoImage()  {

	auto_ptr<VideoImage> reImage;
	VideoDecodedFrame * nextFrame = popDecodedVideoFrame();
	if(nextFrame){
		reImage.reset(nextFrame->getImage());
		delete nextFrame; //free the VideoDecodedFrame
#if ENABLE_DEBUG
		_videoFrameCount--;
#endif
	}
	return reImage;
#if 0
	AVFrame *videoFrame = NULL;
	videoFrame = popDecodedVideoFrame();
	auto_ptr<VideoImage> reImage;
#if 1
	if(videoFrame){
	    PixelFormat srcPixFmt = _videoCodecCtx->pix_fmt;
		int result, bufSize;
		result = bufSize = 0;
		const int w = _videoCodecCtx->width;
		const int h = _videoCodecCtx->height;

		PixelFormat desPixFmt = PIX_FMT_RGB24;
		if(!_swsCtx){
			_swsCtx = sws_getContext(w, h, srcPixFmt, w, h, desPixFmt,
					SWS_BILINEAR, NULL, NULL, NULL);
		}
		if(!_swsCtx){
			cout<<__FILE__<<"("<<__LINE__<<")"<<"   Create the swsContext failed"<<endl;
			goto fail;
		}
		bufSize = avpicture_get_size(desPixFmt, w, h);
		reImage.reset(new VideoImage(w, h, IMAGE_RGB));
		reImage->_pts = convertTime(videoFrame->pkt_pts);
		AVPicture picture;

		avpicture_fill(&picture, reImage->_data, desPixFmt, w, h);

		result = sws_scale(_swsCtx, videoFrame->data, videoFrame->linesize,
											0, h, picture.data, picture.linesize);
		if(result == -1){
			cout<<"conver the image failed"<<endl;
			goto fail;
		}
		av_free(videoFrame);
		return reImage;
fail:
	av_free(videoFrame);
	return reImage;
	}//if(videoFrame)
	else{
		cout<<"decoded video frame queue empty"<<endl;
		return reImage;}
#endif
#endif
}
//utility functions
int64_t VideoDecoderFFmpeg::convertTime(double time) const {
	return (int64_t)(time*_videoTimeBase*1000.0);
}

int64_t VideoDecoderFFmpeg::nextVideoFrameTimestamp(){
	boost::mutex::scoped_lock lock(_framesQueueMutex);
	if(_videoDecodedFramesQueue.empty()){
		return -1;
	}
	VideoDecodedFrame *videoFrame = _videoDecodedFramesQueue.front();
	//int64_t res = convertTime(videoFrame->pkt_pts);
	int64_t res = videoFrame->getPts();
	return res;
}

void VideoDecoderFFmpeg::clearVideoFrameQueue(){
	boost::mutex::scoped_lock lock(_framesQueueMutex);
	deque<VideoDecodedFrame*>::iterator iter, end;
	iter = _videoDecodedFramesQueue.begin();
	end = _videoDecodedFramesQueue.end();
	for(; iter!=end; iter++){
		delete((*iter)->getImage());
		delete(*iter);
#if ENABLE_DEBUG
		_videoFrameCount--;
#endif
	}
	_videoDecodedFramesQueue.clear();
	avcodec_flush_buffers(_videoCodecCtx);
	if(queueSize()<4){
		_decoderThreadWakeup.notify_all();
	}
}

}//namespace snail
}//namespace snail
