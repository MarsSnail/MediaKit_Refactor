/*
 * IOChannel.cpp
 *
 *  Created on: 2013-6-28
 *      Author: lxn
 */

#include "IOChannel.h"

namespace snail{
namespace netWork{

unsigned int
IOChannel::read_le32(){
	unsigned int result = static_cast<unsigned int>(read_byte());
	result |= static_cast<unsigned int>(read_byte()) << 8;
	result |= static_cast<unsigned int>(read_byte()) <<16;
	result |= static_cast<unsigned int>(read_byte()) <<24;
	return result;
}

unsigned char
IOChannel::read_le16(){
	unsigned char result = static_cast<unsigned char>(read_byte());
	result |= static_cast<unsigned char>(read_byte()) << 8;
	return  result;
}

int
IOChannel::read_string(char* dst, int max_length){
	int i = 0;
	while(i < max_length){
		dst[i] = read_byte();
		if(dst[i] == '\0') return i;
		i++;
	}
	dst[max_length -1] = '\0';
	return -1;
}
float
IOChannel::read_float32(){
	union{
		float f;
		unsigned int i;
	}u;
	u.i = read_le32();
	return u.f;
}
unsigned char
IOChannel::read_byte(){
	unsigned char u;
	if(read(&u,1) == -1){
		printf("Could not read a single byte from input \n");

	}
	return u;
}
std::streamsize
IOChannel::write(const void*,std::streamsize){
	return 1;
}

}//namespace netWork
}//namespace snail

